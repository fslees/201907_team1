//=============================================================================
//
// ノーツの管理ヘッダー処理 [notemanager.h]
// Author : GP12A332_26_田中太陽
//
//=============================================================================
#ifndef _NOTEMANAGER_H_
#define _NOTEMANAGER_H_

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "main.h"
#include "note.h"
#include "lane.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define NOTE_SET_POS_X		(50.0f)
#define NOTE_SET_POS_Y		(50.0f)
#define NOTE_SET_POS_Z		(1000.0f)

//*****************************************************************************
// 列挙型
//*****************************************************************************
enum LANE_NUM
{//レーン通し番号
	LEFT_LANE,
	CENTER_LANE,
	RIGHT_LANE,
};

//*****************************************************************************
// クラス定義
// NoteManagerクラス
// ・ノーツの複数化とそれぞれの制御を行う。
//*****************************************************************************
class NoteManager
{
private:
	D3DXVECTOR3	lanePos[LANE_NUM_MAX];	// レーンの座標

public:
	Note		*note;
	NoteManager();
	~NoteManager();
	void Update(void);
	void Draw(void);
	//=============================================================================
	// ノーツの設置関数
	// 第１引数：int lineNum(判定するレーン番号)
	// 戻り値　：な　し
	//=============================================================================
	void SetNote(int laneNum, float scrSpeed);			
	//=============================================================================
	// レーンへの設置関数
	// 第１引数：int lineNum(判定するレーン番号)
	// 第２引数：int noteNum(ノーツの配列番号)
	// 戻り値　：bool型　ノーツの発生が行われたらtrue
	//					 ノーツの発生がない場合false
	//=============================================================================
	bool SetNoteLane(int laneNum, int noteNum, float scrSpeed);
};

#endif
