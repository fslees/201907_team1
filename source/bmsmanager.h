//=============================================================================
//
// 譜面データの管理処理 [bmsmanager.h]
// Author : GP12A332_26_田中太陽
//
//=============================================================================
#ifndef _BMSMANAGER_H_
#define _BMSMANAGER_H_

#include "main.h"
#include "bmsfile.h"
#include "notemanager.h"
#include "sound.h"
//*****************************************************************************
// `列挙型
//*****************************************************************************
enum ChannelNum
{
// BMSのチャンネル番号
	CH01,
	CH02,
	CH03,
	CH04,
	CH05,
	CH06,
	CH_MAX
};

//*****************************************************************************
// クラス定義
// BmsManagerクラス
// ・譜面データの管理やノーツの排出制御を行う。
//*****************************************************************************
class BmsManager
{
private:
	LONG					nowCount;			// 現在の時間
	LONGLONG				startTime;			// ゲーム開始時の時間(高解像度タイマー)
	LONGLONG				globalFreq;			// マシンの１秒間のカウント数(高解像度タイマー)
	double					elapsedTime;		// 開始からの経過時間(秒)
	int						startNum[256];		// BMS演奏で計算開始する配列番号(処理を軽くするため)
	float					scrMulti;
	int						scrZ;
	static const int		index[];			// チャンネルリスト
	LPDIRECTSOUNDBUFFER8	BGM;				// BGMのサウンドバッファー

public:	
	BmsFile					bms;				// BMS（譜面データ）
	int						offZ;				// スクロールを考慮したZ座標

												//====================================================================
// コンストラクタ
// 引　数：なし
// 戻り値：なし
// 説　明：各変数の初期化とマシンの周波数を取得し、経過時間のカウント
// 　　　　を開始する。譜面のデータのロードを行う。
//====================================================================
	BmsManager();
//====================================================================
// デストラクタ
// 引　数：なし
// 戻り値：なし
// 説　明：必要なものの解放処理
//====================================================================
	~BmsManager();
//====================================================================
// 譜面データの更新処理
// 引　数：なし
// 戻り値：なし
// 説　明：カウントの経過時間から譜面の進行度を確認及び更新を行う。
//		　 カウント経過時間から算出した移動量を算出する。
//====================================================================
	void Update();
//====================================================================
// 譜面データのノーツ発生時間の確認処理
// 引　数：なし
// 戻り値：bool型
// 説　明：譜面データのノーツ排出時間と現在の経過時間を確認し、ノーツ
//		　 の設置を行う。
//====================================================================
	bool CheckSetCount(NoteManager *note);
};
#endif
